from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import openai
import pytesseract
from PIL import Image
from io import BytesIO
import os

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ===
app = Flask(__name__)
CORS(app)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
last_answer = ""

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ AI —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/upload', methods=['POST'])
def upload_image():
    global last_answer
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_file = request.files['image']
        image = Image.open(image_file.stream)

        # OCR
        text = pytesseract.image_to_string(image)
        print("üìÉ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n", text)

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        prompt = (
           "Hi, this is a test I'm currently taking during my exam session."  
            "Please help me. The text may contain multiple questions, but I only need the answer"  
            "to the **last multiple-choice question** (A, B, C, or D)."  
            "Indicate which question it is (for example: Q3: C), and respond with **only one letter**, without any explanations."  
            "Here is the task text:""\n\n"
           f"{text}"
        )       

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response.choices[0].message.content.strip()
        print("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç AI:", answer)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è popup
        last_answer = answer

        return jsonify({"answer": answer})

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        return jsonify({"error": str(e)}), 500

@app.route('/last', methods=['GET'])
def get_last_answer():
    return jsonify({"answer": last_answer})

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5050)))
