from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import openai
import pytesseract
from PIL import Image
from io import BytesIO
import os

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ===
app = Flask(__name__)
CORS(app)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
last_answer = ""

@app.route('/', methods=['GET'])
def home():
    return "‚úÖ AI —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/upload', methods=['POST'])
def upload_image():
    global last_answer
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_file = request.files['image']
        image = Image.open(image_file.stream)

        # OCR
        text = pytesseract.image_to_string(image)
        print("üìÉ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n", text)

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        prompt = (
           "–ü—Ä–∏–≤–µ—Ç, –≤–æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Å–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–∂—É –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏. "
           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏ –º–Ω–µ. –í —Ç–µ–∫—Å—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–æ –º–Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–≤–µ—Ç "
           "—Ç–æ–ª—å–∫–æ –Ω–∞ **–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞** (A, B, C –∏–ª–∏ D). "
           "–£–∫–∞–∂–∏, –∫–∞–∫–æ–π —ç—Ç–æ –ø–æ —Å—á—ë—Ç—É –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Q3: C¬ª), –∏ –æ—Ç–≤–µ—Ç—å **—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π**, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. "
           "–í–æ—Ç —Å–∞–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n"
           f"{text}"
        )       

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response.choices[0].message.content.strip()
        print("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç AI:", answer)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è popup
        last_answer = answer

        return jsonify({"answer": answer})

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        return jsonify({"error": str(e)}), 500

@app.route('/last', methods=['GET'])
def get_last_answer():
    return jsonify({"answer": last_answer})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5050)
